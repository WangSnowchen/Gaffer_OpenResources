import Gaffer
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["Onion_skin"] = Gaffer.Box( "Onion_skin" )
parent.addChild( __children["Onion_skin"] )
__children["Onion_skin"].addChild( Gaffer.TimeWarp( "TimeWarp" ) )
__children["Onion_skin"]["TimeWarp"].setup( GafferScene.ScenePlug( "in", ) )
__children["Onion_skin"]["TimeWarp"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( Gaffer.Expression( "Expression1" ) )
__children["Onion_skin"]["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"]["Expression1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( GafferScene.CollectScenes( "CollectScenes" ) )
__children["Onion_skin"]["CollectScenes"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( GafferScene.Isolate( "Isolate" ) )
__children["Onion_skin"]["Isolate"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( GafferScene.PathFilter( "PathFilter" ) )
__children["Onion_skin"]["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["Onion_skin"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["Onion_skin"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Onion_skin"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Onion_skin"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( Gaffer.StringVectorDataPlug( "paths", defaultValue = IECore.StringVectorData( [  ] ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( Gaffer.Dot( "Dot" ) )
__children["Onion_skin"]["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["Onion_skin"]["Dot"].addChild( Gaffer.BoolPlug( "__uiInputConnectionsMinimised", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"]["Dot"].addChild( Gaffer.BoolPlug( "__uiOutputConnectionsMinimised", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"]["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( GafferScene.Wireframe( "Wireframe" ) )
__children["Onion_skin"]["Wireframe"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( GafferScene.PathFilter( "PathFilter1" ) )
__children["Onion_skin"]["PathFilter1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Onion_skin"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
Gaffer.Metadata.registerValue( __children["Onion_skin"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["Onion_skin"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["Onion_skin"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["Onion_skin"], 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( __children["Onion_skin"], 'documentation:url', '' )
Gaffer.Metadata.registerValue( __children["Onion_skin"], 'description', 'A container for "subgraphs" - node networks which exist inside the\nBox and can be exposed by promoting selected internal plugs onto the\noutside of the Box.\n\nBoxes can be used as an organisational tool for simplifying large\ngraphs by collapsing them into sections which perform distinct tasks.\nThey are also used for authoring files to be used with the Reference\nnode.' )
__children["Onion_skin"]["TimeWarp"]["offset"].setInput( __children["Onion_skin"]["Expression1"]["__out"]["p0"] )
__children["Onion_skin"]["TimeWarp"]["in"].setInput( __children["Onion_skin"]["Isolate"]["out"] )
__children["Onion_skin"]["TimeWarp"]["__uiPosition"].setValue( imath.V2f( -71.1220016, -1.79858971 ) )
__children["Onion_skin"]["Expression1"]["__uiPosition"].setValue( imath.V2f( -57.5220032, -1.69946003 ) )
__children["Onion_skin"]["CollectScenes"]["in"].setInput( __children["Onion_skin"]["TimeWarp"]["out"] )
__children["Onion_skin"]["CollectScenes"]["rootNames"].setValue( IECore.StringVectorData( [ '0', '1', '2', '3', '4', '5', '6', '7', '8' ] ) )
__children["Onion_skin"]["CollectScenes"]["__uiPosition"].setValue( imath.V2f( -71.1220016, -9.96265125 ) )
__children["Onion_skin"]["Isolate"]["in"].setInput( __children["Onion_skin"]["BoxIn"]["out"] )
__children["Onion_skin"]["Isolate"]["filter"].setInput( __children["Onion_skin"]["PathFilter"]["out"] )
__children["Onion_skin"]["Isolate"]["__uiPosition"].setValue( imath.V2f( -71.1220016, 6.36547279 ) )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["in"], 'noduleLayout:spacing', 2.0 )
__children["Onion_skin"]["PathFilter"]["paths"].setInput( __children["Onion_skin"]["paths"] )
__children["Onion_skin"]["PathFilter"]["__uiPosition"].setValue( imath.V2f( -57.7149582, 12.5831871 ) )
__children["Onion_skin"]["BoxIn"]["__in"].setInput( __children["Onion_skin"]["in"] )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["Onion_skin"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( -71.1212769, 14.697504 ) )
__children["Onion_skin"]["BoxOut"]["in"].setInput( __children["Onion_skin"]["Wireframe"]["out"] )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["Onion_skin"]["BoxOut"]["passThrough"].setInput( __children["Onion_skin"]["Dot"]["out"] )
__children["Onion_skin"]["BoxOut"]["enabled"].setInput( __children["Onion_skin"]["enabled"] )
__children["Onion_skin"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -69.6227036, -26.458746 ) )
__children["Onion_skin"]["out"].setInput( __children["Onion_skin"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["paths"], 'description', "The list of paths to the locations to be matched by the filter.\nA path is formed by a sequence of names separated by `/`, and\nspecifies the hierarchical position of a location within the scene.\nPaths may use Gaffer's standard wildcard characters to match\nmultiple locations.\n\nThe `*` wildcard matches any sequence of characters within\nan individual name, but never matches across names separated\nby a `/`.\n\n - `/robot/*Arm` matches `/robot/leftArm`, `/robot/rightArm` and\n   `/robot/Arm`. But does not match `/robot/limbs/leftArm` or\n   `/robot/arm`.\n\nThe `...` wildcard matches any sequence of names, and can be\nused to match locations no matter where they are parented in\nthe hierarchy.\n\n - `/.../house` matches `/house`, `/street/house` and `/city/street/house`." )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["paths"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["paths"], 'ui:scene:acceptsPaths', True )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["paths"], 'vectorDataPlugValueWidget:dragPointer', 'objects' )
Gaffer.Metadata.registerValue( __children["Onion_skin"]["paths"], 'plugValueWidget:type', 'GafferSceneUI.PathFilterUI._PathsPlugValueWidget' )
__children["Onion_skin"]["Dot"]["in"].setInput( __children["Onion_skin"]["BoxIn"]["out"] )
__children["Onion_skin"]["Dot"]["__uiInputConnectionsMinimised"].setValue( True )
__children["Onion_skin"]["Dot"]["__uiPosition"].setValue( imath.V2f( -61.3409958, -18.9584618 ) )
__children["Onion_skin"]["Wireframe"]["in"].setInput( __children["Onion_skin"]["CollectScenes"]["out"] )
__children["Onion_skin"]["Wireframe"]["filter"].setInput( __children["Onion_skin"]["PathFilter1"]["out"] )
__children["Onion_skin"]["Wireframe"]["width"].setValue( 0.10000000149011612 )
__children["Onion_skin"]["Wireframe"]["__uiPosition"].setValue( imath.V2f( -71.1227036, -18.1267128 ) )
__children["Onion_skin"]["PathFilter1"]["paths"].setValue( IECore.StringVectorData( [ '/0/...', '/1/...', '/2/...', '/3/...', '/5/...', '/6/...', '/7/...', '/8/...' ] ) )
__children["Onion_skin"]["PathFilter1"]["__uiPosition"].setValue( imath.V2f( -58.1220016, -12.0440922 ) )
__children["Onion_skin"]["__uiPosition"].setValue( imath.V2f( -31.1060982, -66.8368149 ) )
__children["Onion_skin"]["Expression1"]["__engine"].setValue( 'OSL' )
__children["Onion_skin"]["Expression1"]["__expression"].setValue( 'string n = context("collect:rootName", "0");\nparent.__out.p0 = 4-stof(n);' )


del __children

